Q1) Write a program to read an integer 1D array containing 8 bits (0s, 1s) of an unsigned binary integer. The program should print the decimal value for the integer.

ALGORITHM:
Step 1:Start
Step 2:Initialize an array binaryArray for 8-bit binary digits.
Step 3:Prompt user for an 8-bit binary integer.
Step 4:Read each binary digit into binaryArray using a loop.
Step 5:Initialize decimal to 0 and power to 7.
Step 6 :Convert binary to decimal using a loop:Update decimal by adding binaryArray[i] * 2^power.
              And Decrease power by 1 in each iteration.
Step 7:Display the calculated decimal value.
Step 8:Stop.

CODE:
#include <stdio.h>
#include <math.h>
int binaryToDecimal(int binaryArray[]) {
    int decimal = 0;
    int power = 7; 
    for (int i = 0; i < 8; i++) {
        decimal += binaryArray[i] * pow(2, power);
        power--;
    }
    return decimal;
}
int main() {
    int binaryArray[8];
    printf("Enter an 8-bit binary integer: ");
    for (int i = 0; i < 8; i++) {
        scanf("%1d", &binaryArray[i]);
    }
    int decimalValue = binaryToDecimal(binaryArray);
    printf("Decimal value: %d\n", decimalValue);
    return 0;
}

 

Q2)   Currency notes are available in the following seven denominations: Rs. 1, Rs. 2, Rs. 5, Rs. 10, Rs. 20, Rs.50, and Rs. 100.You will first read an integer array (named purse [7]) of seven elements, where the array elements represents the number of notes of each denomination (in increasing order of denomination) available with you. You are also given an amount of money to be paid using these notes. The amount will be less than Rs. 1000. You have to pay the amount using minimum number of notes. Print the number of notes of each denomination which you will use to pay the amount. If the amount cannot be paid using the available notes, print “Failed to Pay”.

ALGORITHM:
Step 1:Start
Step2:Initialize arrays for denominations, purse, and notesUsed.
Step3:Prompt user for the number of notes for each denomination and store in 'purse' array.
Step 4:Read the amount to be paid; if it's over 1000, display an error and exit.
Step 5:Display notes used to pay the amount using a loop through denominations.
Step 6:Subtract denominations from the amount, updating 'purse' and 'notesUsed' accordingly.
Step 7:Display count and denomination if notes used; check if amount is paid successfully.
Step 8:Display success message or "Insufficient notes to pay the amount."
Step 9:Stop

CODE:
#include <stdio.h>
void payAmountWithNotes(int amount, int purse[7]) {
    int denominations[] = {100, 50, 20, 10, 5, 2, 1};
    int notesUsed[7] = {0}; 
    printf("Notes used to pay Rs. %d:\n", amount);

    for (int i = 0; i < 7; i++) {
        while (amount >= denominations[i] && purse[i] > 0) {
            amount -= denominations[i];
            purse[i]--;
            notesUsed[i]++;
        }

        if (notesUsed[i] > 0) {
            printf("%d notes of Rs. %d\n", notesUsed[i], denominations[i]);
        }
    }
    if (amount == 0) {
        printf("Amount paid successfully.\n");
    } else {
        printf("Insufficient notes to pay the amount.\n");
    }
}

int main() {
    int purse[7];
    int denominations[] = {100, 50, 20, 10, 5, 2, 1};
    printf("Enter the number of notes for each denomination:\n");
    for (int i = 0; i < 7; i++) {
        printf("Rs. %d notes: ", denominations[i]);
        scanf("%d", &purse[i]);
    }
    int amount;
    printf("Enter the amount to be paid (less than 1000): ");
    scanf("%d", &amount);
    if (amount >= 1000) {
        printf("Amount should be less than 1000.\n");
        return 1; 
    }
    payAmountWithNotes(amount, purse);
    return 0;
}

 

Q3) Write functions to perform the following operations with two-dimensional arrays.
i) Reading any two dimensional array elements.
ii) Finding maximum and standard deviation of array elements.
iii) Printing the transpose of a matrix

ALGORITHM:
Step 1:Start.
Step 2:Initialize constants ROWS and COLS for the array size.
Step 3:Define a function readArray(arr) to read elements into a 2D array using nested loops.
Step 4:Define a function maxAndStd(arr) to calculate max element and standard deviation:
•	Initialize max, sum, and count.
•	Iterate through the array, updating max and calculating sum and count.
•	Calculate mean, then iterate to calculate standard deviation.
•	Display max and standard deviation.
Step 5:Define a function printTranspose(arr) to print the transpose of the matrix using nested loops.
Step 6:In the main function:
•	Declare a 2D array 'array'.
•	Call readArray(array) to input elements.
•	Call maxAndStd(array) to calculate and display max element and standard deviation.
•	Call printTranspose(array) to print the transpose.
Step 7:Stop.

CODE:
#include <stdio.h>
#include <math.h>

#define ROWS 3
#define COLS 3
void readArray(int arr[ROWS][COLS]) {
    int i;
    int j;
    printf("Enter the elements of the array (%dx%d):\n", ROWS, COLS);
    for (i = 0; i < ROWS; i++) {
	for ( j = 0; j < COLS; j++) {
	    scanf("%d", &arr[i][j]);
	}
    }
}
void maxAndStd(int arr[ROWS][COLS]) {
    int max = arr[0][0];
    int sum = 0;
    int count = 0;
    int i;
    int j;
    for ( i = 0; i < ROWS; i++) {
	for ( j = 0; j < COLS; j++) {
	    if (arr[i][j] > max) {
		max = arr[i][j];
	    }
            sum += arr[i][j];
	    count++;
	}
    }
    double mean = (double)sum / count;
    double stdDev = 0;
    for ( i = 0; i < ROWS; i++) {
	for ( j = 0; j < COLS; j++) {
	    stdDev += pow(arr[i][j] - mean, 2);
	}
    }
    stdDev = sqrt(stdDev / count);
    printf("Maximum element: %d\n", max);
    printf("Standard Deviation: %lf\n", stdDev);
}

void printTranspose(int arr[ROWS][COLS]) {
    int i;
    int j;
    printf("Transpose of the matrix:\n");
    for (j = 0; j < COLS; j++) {
	for ( i = 0; i < ROWS; i++) {
	    printf("%d\t", arr[i][j]);
	}
	printf("\n");
    }
}
int main() {
    int array[ROWS][COLS];
    readArray(array);
    maxAndStd(array);
    printTranspose(array);
    return 0;
}

